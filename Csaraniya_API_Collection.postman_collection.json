{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Csaraniya API Collection",
		"description": "Complete API collection for Csaraniya course selling platform with student and admin endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Student Authentication",
			"item": [
				{
					"name": "Register Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.userId) {",
									"        pm.environment.set('student_id', response.data.userId);",
									"        pm.environment.set('student_mobile', response.data.mobileNumber);",
									"        console.log('Student registered successfully:', response.data.userId);",
									"    }",
									"}",
									"",
									"pm.test('Registration successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\",\n  \"password\": \"{{student_password}}\",\n  \"firstName\": \"{{student_first_name}}\",\n  \"lastName\": \"{{student_last_name}}\",\n  \"dateOfBirth\": \"1995-05-15\",\n  \"gender\": \"male\",\n  \"preferredLanguage\": \"en\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend Registration OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success) {",
									"        console.log('Registration OTP resent successfully');",
									"    }",
									"}",
									"",
									"pm.test('Resend OTP response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 429]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/resend-registration-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"resend-registration-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success) {",
									"        console.log('Mobile number verified successfully');",
									"    }",
									"}",
									"",
									"pm.test('Verification response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\",\n  \"otp\": \"{{registration_otp}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/verify-registration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"verify-registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.tokens) {",
									"        pm.environment.set('student_access_token', response.data.tokens.accessToken);",
									"        pm.environment.set('student_refresh_token', response.data.tokens.refreshToken);",
									"        pm.environment.set('student_device_id', response.data.deviceId);",
									"        console.log('Student login successful');",
									"        ",
									"        // Check if previous session was cleared",
									"        if (response.data.sessionInfo && response.data.sessionInfo.previousSessionCleared) {",
									"            console.log('Previous session cleared from device:', response.data.sessionInfo.previousDevice);",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Login response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\",\n  \"password\": \"{{student_password}}\",\n  \"deviceId\": \"{{device_id}}\",\n  \"deviceName\": \"Postman Test Device\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Password Reset",
			"item": [
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resend Forgot Password OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success) {",
									"        console.log('Password reset OTP resent successfully');",
									"    }",
									"}",
									"",
									"pm.test('Resend forgot password OTP response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 429]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/resend-forgot-password-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"resend-forgot-password-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"mobileNumber\": \"{{student_mobile_number}}\",\n  \"otp\": \"{{password_reset_otp}}\",\n  \"newPassword\": \"{{new_student_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Profile",
			"item": [
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{student_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Updated First Name\",\n  \"lastName\": \"Updated Last Name\",\n  \"address\": {\n    \"city\": \"Colombo\",\n    \"district\": \"Colombo\",\n    \"province\": \"Western\",\n    \"country\": \"Sri Lanka\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Authentication",
			"item": [
				{
					"name": "Setup Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.adminId) {",
									"        pm.environment.set('super_admin_id', response.data.adminId);",
									"        console.log('Super admin created successfully:', response.data.adminId);",
									"    }",
									"}",
									"",
									"pm.test('Super admin setup response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 403]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"setupKey\": \"{{super_admin_setup_key}}\",\n  \"username\": \"{{super_admin_username}}\",\n  \"email\": \"{{super_admin_email}}\",\n  \"password\": \"{{super_admin_password}}\",\n  \"firstName\": \"Super\",\n  \"lastName\": \"Admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/setup-super-admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"setup-super-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.tokens) {",
									"        pm.environment.set('admin_access_token', response.data.tokens.accessToken);",
									"        pm.environment.set('admin_refresh_token', response.data.tokens.refreshToken);",
									"        pm.environment.set('admin_session_id', response.data.tokens.sessionId);",
									"        pm.environment.set('admin_device_id', response.data.deviceId);",
									"        console.log('Admin login successful');",
									"    }",
									"}",
									"",
									"pm.test('Admin login response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identifier\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\",\n  \"deviceId\": \"{{admin_device_id}}\",\n  \"deviceName\": \"Postman Admin Device\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Management",
			"item": [
				{
					"name": "Get Admin Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get admin profile response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    ",
									"    if (response.success && response.data.admin.capabilities) {",
									"        console.log('Admin capabilities:', response.data.admin.capabilities);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dashboard Stats",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data.adminId) {",
									"        pm.environment.set('created_admin_id', response.data.adminId);",
									"        console.log('Admin user created successfully:', response.data.adminId);",
									"    }",
									"}",
									"",
									"pm.test('Create admin response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 401, 403]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{new_admin_username}}\",\n  \"email\": \"{{new_admin_email}}\",\n  \"password\": \"{{new_admin_password}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"Admin\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/create-admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"create-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Admins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get admins response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    ",
									"    if (response.success && response.data.admins) {",
									"        console.log('Total admins found:', response.data.admins.length);",
									"        console.log('Pagination:', response.data.pagination);",
									"        ",
									"        // Store first admin ID for testing (excluding current user)",
									"        const currentAdminId = pm.environment.get('super_admin_id') || pm.environment.get('created_admin_id');",
									"        const targetAdmin = response.data.admins.find(admin => admin._id !== currentAdminId);",
									"        if (targetAdmin) {",
									"            pm.environment.set('target_admin_id', targetAdmin._id);",
									"            pm.environment.set('target_admin_username', targetAdmin.username);",
									"            console.log('Target admin for testing:', targetAdmin.username);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/admins?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"admins"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Admin Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Reset admin password response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 403, 404]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    ",
									"    if (response.success) {",
									"        console.log('Admin password reset successfully');",
									"        console.log('Sessions terminated:', response.data.sessionsTerminated);",
									"        console.log('Reset by:', response.data.resetBy.username);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"newPassword\": \"{{reset_admin_password}}\",\n  \"reason\": \"Password reset for testing purposes - requested by admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/admins/{{target_admin_id}}/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"admins",
								"{{target_admin_id}}",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Admin",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false,\n  \"reason\": \"Account deactivated for testing purposes\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/admins/{{target_admin_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"admins",
								"{{target_admin_id}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reactivate Admin",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/admins/{{target_admin_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"admins",
								"{{target_admin_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Management (Admin)",
			"item": [
				{
					"name": "Get All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get students response', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success');",
									"    ",
									"    if (response.success && response.data.students) {",
									"        console.log('Total students found:', response.data.students.length);",
									"        console.log('Student statistics:', response.data.statistics);",
									"        console.log('Pagination:', response.data.pagination);",
									"        ",
									"        // Store first student ID for testing",
									"        if (response.data.students.length > 0) {",
									"            pm.environment.set('test_student_id', response.data.students[0]._id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/students?page=1&limit=10&status=active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"students"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "active"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Student",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false,\n  \"reason\": \"Account suspended for testing purposes\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/students/{{test_student_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"students",
								"{{test_student_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "System Health",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check response', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('success', true);",
									"    pm.expect(response).to.have.property('message');",
									"    console.log('API Health:', response.message);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generate device ID if not exists",
					"if (!pm.environment.get('device_id')) {",
					"    pm.environment.set('device_id', 'device_' + Math.random().toString(36).substr(2, 9));",
					"}",
					"",
					"// Generate admin device ID if not exists",
					"if (!pm.environment.get('admin_device_id')) {",
					"    pm.environment.set('admin_device_id', 'admin_device_' + Math.random().toString(36).substr(2, 9));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test for response format",
					"pm.test('Response has correct format', function () {",
					"    const response = pm.response.json();",
					"    pm.expect(response).to.be.an('object');",
					"    pm.expect(response).to.have.property('success');",
					"    pm.expect(response).to.have.property('message');",
					"});",
					"",
					"// Log rate limit headers if present",
					"const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
					"const rateLimitReset = pm.response.headers.get('X-RateLimit-Reset');",
					"",
					"if (rateLimitRemaining) {",
					"    console.log('Rate limit remaining:', rateLimitRemaining);",
					"}",
					"",
					"if (rateLimitReset) {",
					"    console.log('Rate limit resets at:', new Date(rateLimitReset * 1000));",
					"}"
				]
			}
		}
	]
} 